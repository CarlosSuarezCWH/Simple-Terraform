name: üöÄ Deploy Application

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'scripts/**'

env:
  TF_IN_AUTOMATION: true
  APP_PORT: 5000
  DEPLOY_USER: ec2-user
  APP_DIR: /home/ec2-user/app

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write  # Para usar OIDC con AWS (opcional)

    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: ÔøΩ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: üèóÔ∏è Terraform Init
        run: |
          terraform init \
            -input=false \
            -backend-config="bucket=${{ secrets.MI_BUCKET_TFSTATE }}" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="key=terraform.tfstate"

      - name: üì° Get infrastructure outputs
        id: terraform-output
        run: |
          echo "db_endpoint=$(terraform output -raw db_endpoint)" >> $GITHUB_OUTPUT
          echo "web_server_ip=$(terraform output -raw web_server_ip)" >> $GITHUB_OUTPUT
          echo "WEB_SERVER_IP=$(terraform output -raw web_server_ip)" >> $GITHUB_ENV

      - name: üîê Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.terraform-output.outputs.web_server_ip }} >> ~/.ssh/known_hosts

      - name: üì¶ Install rsync (for efficient file transfers)
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Crear directorio destino en EC2
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} "mkdir -p $APP_DIR"

      - name: üöÄ Deploy application files
        run: |
          echo "Archivos locales:"
          ls -l ./app/
          echo "Copiando archivos al servidor..."
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" \
            ./app/ $DEPLOY_USER@${{ env.WEB_SERVER_IP }}:$APP_DIR/

      - name: üõ†Ô∏è Setup application environment
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} << 'EOSSH'
            set -e
            echo "üêç Setting up Python environment..."
            sudo apt update
            sudo apt install -y python3-pip python3-venv nginx
            cd $APP_DIR
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "üîß Configuring environment variables..."
            cat > .env << EOF
            DB_HOST=${{ steps.terraform-output.outputs.db_endpoint }}
            DB_USER=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=sportsstore
            APP_PORT=${{ env.APP_PORT }}
            EOF

            echo "üîÑ Restarting application..."
            pkill -f "python app.py" || true
            nohup python app.py > app.log 2>&1 &
          EOSSH

      - name: ‚è≥ Wait for application
        run: |
          echo "‚è±Ô∏è Waiting for application to start..."
          for i in {1..10}; do
            if curl -sSf http://${{ env.WEB_SERVER_IP }}:${{ env.APP_PORT }}/health-check; then
              echo "‚úÖ Application is ready!"
              exit 0
            fi
            sleep 5
          done
          echo "‚ùå Application failed to start"
          exit 1

      - name: üóÉÔ∏è Initialize database
        run: |
          echo "üõ¢Ô∏è Initializing database..."
          curl -X POST http://${{ env.WEB_SERVER_IP }}:${{ env.APP_PORT }}/api/init-db

      - name: ‚úÖ Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          curl -sSf http://${{ env.WEB_SERVER_IP }}:${{ env.APP_PORT }}/api/status
          echo -e "\nüéâ Deployment successful!"