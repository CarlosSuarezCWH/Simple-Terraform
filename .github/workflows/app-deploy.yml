name: üöÄ Deploy Application

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'scripts/**'

env:
  TF_IN_AUTOMATION: true
  APP_PORT: 5000
  DEPLOY_USER: ec2-user
  APP_DIR: /home/ec2-user/app

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write  # Para usar OIDC con AWS (opcional)

    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: ÔøΩ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: üèóÔ∏è Terraform Init
        run: |
          terraform init \
            -input=false \
            -backend-config="bucket=${{ secrets.MI_BUCKET_TFSTATE }}" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" \
            -backend-config="key=terraform.tfstate"

      - name: üì° Get infrastructure outputs
        id: terraform-output
        run: |
          echo "Mostrando outputs de Terraform para depuraci√≥n:"
          terraform output
          echo "db_endpoint=$(terraform output -raw db_endpoint)" >> $GITHUB_OUTPUT
          echo "web_server_ip=$(terraform output -raw web_server_ip)" >> $GITHUB_OUTPUT
          echo "WEB_SERVER_IP=$(terraform output -raw web_server_ip)" >> $GITHUB_ENV

      - name: Verificar valor de db_endpoint
        run: |
          echo "Valor de db_endpoint recibido: ${{ steps.terraform-output.outputs.db_endpoint }}"

      - name: üîê Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.terraform-output.outputs.web_server_ip }} >> ~/.ssh/known_hosts

      - name: Verificar llave SSH
        run: |
          ls -l ~/.ssh/
          head -5 ~/.ssh/id_rsa
          echo "Tama√±o de la llave: $(wc -c < ~/.ssh/id_rsa) bytes"

      - name: üì¶ Install rsync (for efficient file transfers)
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: üîé Mostrar IP del servidor
        run: |
          echo "La IP del servidor es: ${{ env.WEB_SERVER_IP }}"

      - name: Verificar que la IP no est√© vac√≠a
        run: |
          if [ -z "${{ env.WEB_SERVER_IP }}" ]; then
            echo "ERROR: La IP del servidor est√° vac√≠a."
            exit 1
          fi

      - name: Crear directorio destino en EC2
        run: |
          echo "Conectando a $DEPLOY_USER@${{ env.WEB_SERVER_IP }}"
          ssh -v -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} "mkdir -p $APP_DIR"

      - name: Mostrar estructura local antes de rsync
        run: |
          echo "Estructura local de ./app antes de copiar:"
          ls -lR ./app || echo "No existe ./app"
          if [ -f ./app/requirements.txt ]; then
            echo "Contenido local de requirements.txt:"
            cat ./app/requirements.txt
          else
            echo "No existe requirements.txt en ./app"
          fi

      - name: üöÄ Deploy application files
        run: |
          echo "Archivos locales:"
          ls -l ./app/
          echo "Copiando archivos al servidor $DEPLOY_USER@${{ env.WEB_SERVER_IP }}:$APP_DIR"
          rsync -avz --delete -e "ssh -v -o StrictHostKeyChecking=no" \
            ./app/ $DEPLOY_USER@${{ env.WEB_SERVER_IP }}:$APP_DIR/

      - name: Listar archivos en EC2 despu√©s de la copia
        run: |
          echo "Estructura remota de $APP_DIR:"
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} "ls -lR $APP_DIR"
          if ssh -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} "test -f $APP_DIR/requirements.txt"; then
            echo "Contenido remoto de requirements.txt:"
            ssh -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} "cat $APP_DIR/requirements.txt"
          else
            echo "No existe requirements.txt en $APP_DIR"
          fi

      - name: üõ†Ô∏è Setup application environment
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} << 'EOSSH'
            set -e
            echo "üêç Setting up Python environment..."
            sudo yum update -y
            sudo yum install -y python3 python3-pip nginx
            cd "${{ env.APP_DIR }}"
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r "${{ env.APP_DIR }}/requirements.txt"

            echo "üîß Configuring environment variables..."
            DB_HOST_CLEAN=$(echo "${{ steps.terraform-output.outputs.db_endpoint }}" | sed 's/:3306//')
            echo "Valor limpio para DB_HOST: $DB_HOST_CLEAN"
            cat > .env <<EOF
            DB_HOST=$DB_HOST_CLEAN
            DB_USER=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=sportsstore
            APP_PORT=${{ env.APP_PORT }}
            EOF

            echo "Contenido de .env antes de arrancar la app:"
            cat .env
            echo "Variables de entorno relevantes antes de arrancar la app:"
            echo "DB_HOST=",$DB_HOST_CLEAN
            echo "DB_USER=","${{ secrets.DB_USERNAME }}"
            echo "DB_PASSWORD=","${{ secrets.DB_PASSWORD }}"
            echo "DB_NAME=sportsstore"
            echo "APP_PORT=${{ env.APP_PORT }}"

            echo "üîÑ Restarting application..."
            pkill -f "python app.py" || true
            nohup python app.py > app.log 2>&1 &
          EOSSH

      - name: Mostrar .env en EC2
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@${{ env.WEB_SERVER_IP }} "cat $APP_DIR/.env"

      - name: ‚è≥ Wait for application
        run: |
          echo "‚è±Ô∏è Waiting for application to start..."
          for i in {1..10}; do
            if curl -sSf http://${{ env.WEB_SERVER_IP }}:${{ env.APP_PORT }}/health-check; then
              echo "‚úÖ Application is ready!"
              exit 0
            fi
            sleep 5
          done
          echo "‚ùå Application failed to start"
          exit 1

      - name: üóÉÔ∏è Initialize database
        run: |
          echo "üõ¢Ô∏è Initializing database..."
          curl -X POST http://${{ env.WEB_SERVER_IP }}:${{ env.APP_PORT }}/api/init-db

      - name: ‚úÖ Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          curl -sSf http://${{ env.WEB_SERVER_IP }}:${{ env.APP_PORT }}/api/status
          echo -e "\nüéâ Deployment successful!"